#!/usr/bin/python

workdir='/tmp/zuul'

import os
import time
import errno
import sys

def lockjob(job):
    start_time = time.time()
    while True:
        try:
            lockf = os.open((job + '.lock'), os.O_CREAT|os.O_EXCL|os.O_RDWR)
            break;
        except OSError as e:
            if e.errno != errno.EEXIST:
                raise
            if (time.time() - start_time) >= 60:
                print 'sleep:30'
                sys.exit(0)
            time.sleep(2)

def unlockjob(job):
    os.remove((job + '.lock'))


# Enables cgi tracebacks
import cgitb
cgitb.enable()

# And successful cgi output
print "Content-type: text/plain"
print

worker=os.environ['REMOTE_ADDR']
query=os.environ['QUERY_STRING']



os.chdir(workdir)

hostfile=('host.' + worker)
if os.path.exists(hostfile):
    job = open(hostfile).readline().strip()
else:
    job = 'default'


if query.startswith('get'):
    offer='none'
    lockjob(job)
    outfile=open((job + '.next'), 'w')
    for line in open((job + '.work')):
        if offer == 'none':
            if line.strip().endswith('QUEUED'):
                offer = line
                line = line.replace('QUEUED', ("RUNNING:%s:%s" % worker,
                time.time()))
        outfile.write(line)

    if offer == 'none':
        print 'sleep:120'
        unlockjob(job)
        sys.exit(0)

    print (job + ':' + offer.split()[0])
    os.rename((job + '.next'), (job + '.work'))

    for line in open((job + 'hashes')):
        print line.strip()

elif query.startswith('res'):
    (res, job) = query.split(':', 1)
    (job, result) = job.split(':', 1)
    (work, result) = result.rsplit(':', 1)
    lockjob(job)
    found = None
    if not result.startswith('notfound'):
        outfile=open((job + '.found'), 'a')
        outfile.write(query)
        outfile.write('\n')
        outfile.close()
        found='yes'
    outfile=open((job + '.next'), 'w')
    for line in open((job + '.work')):
        if line.startswith(work):
            if found:
                line = line.replace('RUNNING', ("FOUND:%s" % (time.time())))
            else:
                line = line.replace('RUNNING', ("DONE:%s" % (time.time())))
        outfile.write(line)
    print "thanks"
    os.rename((job + '.next'), (job + '.work'))

else:
    print "bad query"

unlockjob(job)
sys.exit(0)
    
